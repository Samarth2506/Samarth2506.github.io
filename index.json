[{"authors":["admin"],"categories":null,"content":"I am a graduate student specializing in Artificial Intelligence and Machine Learning at Johns Hopkins University. Prior to graduate school, I worked with Fortune 500 companies to deploy Data Science solutions at scale.\nCurrently, I am building an open source Python application to learn and teach AI at the JHU Data Science Lab. I am also interning part-time with a Michigan based analytics firm working on Computer Vision problems.\nI am passionate about solving real world problems through Data Science tools I have picked up professionally and academically over the years. I also enjoy teaching and have developed case studies in Python/R to implement Statistical, Machine Learning and Deep Learning models. This website showcases my projects and interests.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://Samarth2506.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a graduate student specializing in Artificial Intelligence and Machine Learning at Johns Hopkins University. Prior to graduate school, I worked with Fortune 500 companies to deploy Data Science solutions at scale.","tags":null,"title":"Samarth Marudheri","type":"authors"},{"authors":null,"categories":null,"content":"Abstract : The goal of the study is to detect fake images. An autoencoder is trained adversarially to obtain a latent rich representation of real images. The latent representation is then used to reconstruct an image based on the given input image. We propose a comparative study to test if reconstructed features differ strongly for real and fake images leading to enhanced classification performance. We further argue that adversarially training a classifier (DCGAN) generalizes better on unseen data as compared to CNN based architectures.\n Motivation Recent advances in Generative Adverserial Networks (GANs) have proved both a boon and a bane for the deep learning community. While GANs have made tremendous progress in their ability to synthesize artificial data, the advancement can be misused to architect adverserial attacks. For example, DeepFakes can affect confirmation bias and have consequences on public opinion. Here is a video of \u0026lsquo;Obama\u0026rsquo; making a speech.\nThe technology can be further misused for financial gain and even revenge. For example, the Deep Nudes application renders nudes of women. Scary, isn\u0026rsquo;t it?\nThis project demonstrates the potential of using the information learnt by GANs themselves in an effective way to classify images as fake or real.\n Data and Pre-processing For real images, a subset of the CelebA-HQ dataset was used. For fake/synthezed images, a subset of Nvidia\u0026rsquo;s StyleGAN dataset was used.\nFor efficient computation, the images were resized to Numpy arrays of [64x64] and trained using Google Colab. The models were implemented in PyTorch.\n General Setup AutoGAN Training Source [Zhang et al., 2019]\nThe AutoGAN is trained to reconstruct images based on real images from the CelebA dataset. The encoder network outputs a latent representation which is given to the decoder layer to generate images. As a result, the network outputs a reconstructed image for every real image (pair-wise generation).\nAn additional variation experimented was using a 1-layer AutoGAN versus 4-layers to test if more complex architectures of AutoGANs can learn better.\nExperiment - 1 In Approach 1, The real and fake images were passed for a simple CNN classification (using the Alexnet architecture). For Approach 2, The real and fake images were first passed to the trained AutoGAN and each result was then passed to Alexnet for the final classification.\n Experiment - 2 Results Experiment - 1 Performance Experiment - 2 Performance Takeaways -- Click here to access the complete paper and code here.\n","date":1590537600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590537600,"objectID":"11c86f35a81f6efa4c435d93d3082865","permalink":"https://Samarth2506.github.io/projects/third_project/","publishdate":"2020-05-27T00:00:00Z","relpermalink":"/projects/third_project/","section":"projects","summary":"The goal of the study is to detect fake images. An autoencoder is trained adversarially to obtain a latent rich representation of real images. The latent representation is then used to reconstruct an image based on the given input image. We propose a comparative study to test if reconstructed features differ strongly for real and fake images leading to enhanced classification performance. We further argue that adversarially training a classifier (DCGAN) generalizes better on unseen data as compared to CNN based architectures.","tags":["Deep Learning","Python","PyTorch"],"title":"DeepFake Detection with GANs","type":"projects"},{"authors":null,"categories":null,"content":"I am currently developing Swirypy, an open source Python package for users to learn and teach AI at the Johns Hopkins Data Science Lab. The work is inspired by Swirl for R.\nI am adding features to the package for users to write lessons that are scalable and modularized to interoperate seamlessly with Python libraries to enable easy content creation by instructors.\nThe project has been exciting and challenging with my first foray in to Python development. Feel free to write to me to know more and stay tuned for more.\n","date":1590537600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590537600,"objectID":"7c552153c91a6e414475235334abc3d9","permalink":"https://Samarth2506.github.io/projects/fourth_project/","publishdate":"2020-05-27T00:00:00Z","relpermalink":"/projects/fourth_project/","section":"projects","summary":"The goal of this project is to develop an open-source Python package to learn and teach AI, similar to Swirl for R. It aims to build on the work by Alexander Bauer. Course content and the application are currently under development. Stay Tuned!","tags":["Artificial Intelligence","Python","Development"],"title":"Swirlypy - A tool to learn and teach AI","type":"projects"},{"authors":null,"categories":null,"content":"The goal of this project is to flag fradulent claims using Computer Vision techniques for an automotive insurance company. The idea is to use misalignment in tables and font changes in the claim as signals to classify insurance claims.\n Table Misalginment\nI am investigating OpenCV techniques to detect contours of tables to detect relative misalignment of tables given a document. Additionally, I am also looking at a Deep Learning approach where I use a pre-trained model to detect table contours as the dataset is small.\nFont Analysis\nI am also looking at Deep Learning approaches to detect multiple fonts in a document that may correlate with fraudulent claims.\nI cannot share the code as the data proprietary. However, Feel free to get in touch to know more.\n","date":1582761600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582761600,"objectID":"4d31e4d166faa1ab6e208e0fe8313b64","permalink":"https://Samarth2506.github.io/projects/fifth_project/","publishdate":"2020-02-27T00:00:00Z","relpermalink":"/projects/fifth_project/","section":"projects","summary":"The goal of this project is to flag fradulent  claims using Computer Vision techniques for an automotive insurance company. The idea is to use misalignment in tables and changes in fonts as signals to classify insurance claims.","tags":["Artificial Intelligence","Python","Computer Vision"],"title":"Detecting fraudulent insurance claims","type":"projects"},{"authors":null,"categories":null,"content":"Abstract : In the quest for a robust trading strategy capable of navigating the dynamics of a complex environment, Reinforcement Learning algorithms offer significant advantages over traditional Machine Learning techniques. In this paper, we propose multiple deep learning models capable of predicting signals that capture sentiment and major events that affect the stock prices of companies. Signals from the models along with a point estimate from a Time Series models are used as to build a trading agent using a state of the art Actor Critic Reinforcement Learning model. The approach yields a return of 14% average profit on the training data.\nClick here to access the complete paper and code here. Below is an informal summary of the project:\n Want to make some money by investing in the right stocks with minimal effort? Well, consider your time here well spent!\n Current Automated Trading Methods Many (or most) of the work in the domain of automated trading have been in Supervised Learning. Typically, prices are forecast with a neural network model with a set of explanatory variables and then fed in to a training module to make a decision based on a threshold. Learning with explicit labels with the intent of minimization of forecast error does not take in to the full complexity of the problem that a typical trader would be influenced by. Additionally, the dynamic constraints posed by the environment such as liquidity and transaction costs are hard to model with static labels. The problem is further compounded by the fact that current methods are based on statistical arbitrage that typically perform well only with high frequency trades. Hence, sequential decision making with such models with a wider time frame are limited in their approach.\n Enter Reinforcement Learning!  Architecture We use three base models to capture various aspects that affect the stock price of companies. The first model is a textual analysis of 8-K SEC filings of companies that capture the major events in a company such as major leadership change, bankruptcy, etc. that a company is required to file. Investors often use 8-K filings to base their decisions on stocks. Additionally, 8-K filings are categorized in to multiple items that provides additional insight in to the nature of event occured. The second model is a simple time series forecast using an LSTM model. And finally, we will use sentiment data already tagged on the Stocktwits platform to capture sentiment of the crowd. The signals from all 3 models constitute the state of the Reinforcement Learning model.\nThe actor critic model, as the name suggests consists if learning two sets of weights typically with different neural networks. The Actor defines the policy or the behaviour of the agent and the critic defines how good the action is which is also known as the value function. In our implementation, the same set of weights are shared for both tasks.\nWhat exactly are these tasks?\nWe are learning the probabilities of the actions as well as true reward value for the action. Consequently, the biggest loss for an action assigned low probability would result in a high reward! Below is the sample behaviour of the trading agent:\nFinally, we end with a training average profit of 14 percent. We plan to run further experiments to deliver further insights. Stay tuned!\n","date":1566864000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566864000,"objectID":"30801ae55bc569a55b098ad5bf1cccbc","permalink":"https://Samarth2506.github.io/projects/first_project/","publishdate":"2019-08-27T00:00:00Z","relpermalink":"/projects/first_project/","section":"projects","summary":"In the quest for a robust trading strategy capable of navigating the dynamics of a complex environment, Reinforcement Learning algorithms offer significant advantages over traditional Machine Learning techniques. In this paper, we propose multiple deep learning models capable of predicting signals that capture sentiment and major events that affect the stock prices of companies.","tags":["Reinforcement Learning"],"title":"Automated Trading Strategy with Reinforcement Learning","type":"projects"},{"authors":null,"categories":null,"content":"Predicted flight delays from structured data with attributes like origin and destination city, departure and arrival times,carrier information, passenger count and weather station data of the cities of interest. Iterated through the Data Science pipeline to build Machine Learning models including Logistic Regression and Decision Trees. Post model building, hosted the app on R Shiny. The details of the implementation is described below.\n We chose to predict flight delays because we love everything planes! Additionally, flight delays caused losses of over $28 billion in the US alone in 2018. Planning for anticipated delays can significantly improve operating costs for airlines.\nThe data is from Kaggle and includes data about domestic US flight carriers for 2015. The dataset has about 6 million records and 30 features. Only 20% of the data was used to train/test the models due to constraints on computation. The prediction is made for the day and airline of the user\u0026rsquo;s choice.\n Link to the app: https://samarth2506.shinyapps.io/Flight_Delays_App/\nTo read more about using the app, click on the About tab after launching the app!\nData Pre-processing   The flight data and the weather station data sets were merged carefully to avoid loss of data and retain accurate information.\n  Missing information was imputed through Knn Imputation.\n  The target column was derived on the condition that flights were considered delay is they arrived 15 minutes later than the scheduled time.\n   Data Visualization   Performed univariate, bivariate and multivariate visualizations using data to identify underlying patterns and anamolies in data.\n  Observed an imbalance of 90:10 (on time versus delayed flights) in the target feature.\n   Feature Engineering   Large number of levels in categorical data such as origin/destination cities proved to be a challenge. Binned cities by region such North or South to reduce levels in categorical data. Another strategy was to keep the highest frequency levels and bin the lower frequency levels in to a sigle category.\n  New columns such as day of the week, month and year were derived from the date column to investigate a correlation with flight delays with different time intervals using the Group By function.\n   Data Modeling  Built multiple classification models including Logistic Regression and Decision Trees.   Analysis, Iteration and Communication   Iterated through models using a the most important features infered from models like Decision Trees to reduce computational complexity and over-fitting of the model.\n  Presented trade-off between model interpretation and model accuracy.\n  Developed a deeper understanding of model metrics such as recall, precision and F-1 score\n   Results   A key challenege in prediction was the imbalance in data.\n  Decision Tree was the best model that achieved a score of 90% accuracy on average.\n  Hosted the app successfully using Shiny.\n   Challenges   Logistic Regression model size: The glm function in R used to build the Logistic Regression model by default stores the training data when the model is saved for prediction later. As a result, the app was extremely slow to launch when deployed. To overcome this, we stripped down the saved model to reduce the model size from 1.5 GB to 18.7 KB! Consequently, latency on the hosted app reduced by 500%.\n  Shiny: The project was our first foray in to building and deploying a web application. The learning curve was steep with Shiny, especially while using a ML model to make predictions in real time but totally worth it!\n   ","date":1564185600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564185600,"objectID":"2fbade27c3600616416201e78fdb32f6","permalink":"https://Samarth2506.github.io/projects/second_project/","publishdate":"2019-07-27T00:00:00Z","relpermalink":"/projects/second_project/","section":"projects","summary":"Predicted flight delays from structured data with attributes like origin and destination city, departure and arrival times, carrier information, passenger count and weather station data of the cities of interest. Iterated through the Data Science pipeline to build Machine Learning models including Logistic Regression and Decision Trees. Post model building, hosted the app on R Shiny. Welcome to the app!","tags":["Machine Learning","R","Shiny"],"title":"Flight Delay Prediction","type":"projects"}]